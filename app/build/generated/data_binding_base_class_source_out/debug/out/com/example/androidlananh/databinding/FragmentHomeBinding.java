// Generated by view binder compiler. Do not edit!
package com.example.androidlananh.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.androidlananh.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnReceive;

  @NonNull
  public final Button btnRecent;

  @NonNull
  public final Button btnShare;

  @NonNull
  public final EditText edtFind;

  @NonNull
  public final RecyclerView rcvPost;

  private FragmentHomeBinding(@NonNull LinearLayout rootView, @NonNull Button btnReceive,
      @NonNull Button btnRecent, @NonNull Button btnShare, @NonNull EditText edtFind,
      @NonNull RecyclerView rcvPost) {
    this.rootView = rootView;
    this.btnReceive = btnReceive;
    this.btnRecent = btnRecent;
    this.btnShare = btnShare;
    this.edtFind = edtFind;
    this.rcvPost = rcvPost;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnReceive;
      Button btnReceive = ViewBindings.findChildViewById(rootView, id);
      if (btnReceive == null) {
        break missingId;
      }

      id = R.id.btnRecent;
      Button btnRecent = ViewBindings.findChildViewById(rootView, id);
      if (btnRecent == null) {
        break missingId;
      }

      id = R.id.btnShare;
      Button btnShare = ViewBindings.findChildViewById(rootView, id);
      if (btnShare == null) {
        break missingId;
      }

      id = R.id.edtFind;
      EditText edtFind = ViewBindings.findChildViewById(rootView, id);
      if (edtFind == null) {
        break missingId;
      }

      id = R.id.rcvPost;
      RecyclerView rcvPost = ViewBindings.findChildViewById(rootView, id);
      if (rcvPost == null) {
        break missingId;
      }

      return new FragmentHomeBinding((LinearLayout) rootView, btnReceive, btnRecent, btnShare,
          edtFind, rcvPost);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
